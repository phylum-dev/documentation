"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([["7486"],{7116:function(e,n,i){i.r(n),i.d(n,{frontMatter:()=>r,toc:()=>c,default:()=>h,metadata:()=>t,assets:()=>a,contentTitle:()=>l});var t=JSON.parse('{"id":"phylum-ci/git_precommit","title":"Git pre-commit Integration","description":"Overview","source":"@site/../docs/phylum-ci/git_precommit.md","sourceDirName":"phylum-ci","slug":"/phylum-ci/git_precommit","permalink":"/phylum-ci/git_precommit","draft":false,"unlisted":false,"editUrl":"https://github.com/phylum-dev/phylum-ci/edit/main/docs/integrations/git_precommit.md","tags":[],"version":"current","lastUpdatedBy":"Charles Coggins","lastUpdatedAt":1742485159000,"frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Dazz Integration","permalink":"/integrations/dazz"},"next":{"title":"GitHub Actions Integration","permalink":"/phylum-ci/github_actions"}}'),o=i(5893),s=i(65);let r={},l="Git pre-commit Integration",a={},c=[{value:"Overview",id:"overview",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Configure <code>.pre-commit-config.yaml</code>",id:"configure-pre-commit-configyaml",level:2},{value:"File Control",id:"file-control",level:3},{value:"Argument Control",id:"argument-control",level:3},{value:"Exit Codes",id:"exit-codes",level:3},{value:"Audit Mode",id:"audit-mode",level:3}];function d(e){let n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsxs)(n.h1,{id:"git-pre-commit-integration",children:["Git ",(0,o.jsx)(n.code,{children:"pre-commit"})," Integration"]})}),"\n",(0,o.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"https://pre-commit.com/",children:"pre-commit"})," is a framework for managing and maintaining multi-language Git pre-commit hooks."]}),"\n",(0,o.jsx)(n.p,{children:"Phylum is available as a pre-commit hook."}),"\n",(0,o.jsxs)(n.p,{children:["Once configured for a repository, the git ",(0,o.jsx)(n.code,{children:"pre-commit"})," integration will provide analysis of project dependencies\nfrom manifests or lockfiles during a commit containing those dependency files. The hook will fail and provide\na report if any of the newly added/modified dependencies from the commit fail to meet the established policy."]}),"\n",(0,o.jsxs)(n.p,{children:["The hook will be skipped if no dependencies were added or modified for a given commit.\nIf one or more dependencies are still processing (no results available), then the hook will only fail if\ndependencies that have ",(0,o.jsx)(n.em,{children:"completed analysis results"})," do not meet the active policy."]}),"\n",(0,o.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,o.jsxs)(n.p,{children:["The prerequisites for using the git ",(0,o.jsx)(n.code,{children:"pre-commit"})," hook are:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["The ",(0,o.jsx)(n.a,{href:"https://pre-commit.com/",children:"pre-commit"})," package manager installed"]}),"\n",(0,o.jsxs)(n.li,{children:["A ",(0,o.jsx)(n.a,{href:"/knowledge_base/api-keys",children:"Phylum token"})," with API access\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"https://phylum.io/contact-us/",children:"Contact Phylum"})," or ",(0,o.jsx)(n.a,{href:"https://app.phylum.io/register",children:"register"})," to gain access\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["See also ",(0,o.jsx)(n.a,{href:"/cli/commands/phylum_auth_register",children:(0,o.jsx)(n.code,{children:"phylum auth register"})})," command documentation"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.li,{children:"Consider using a bot or group account for this token"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["Access to the Phylum API endpoints\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"That usually means a connection to the internet, optionally via a proxy"}),"\n",(0,o.jsx)(n.li,{children:"Support for on-premises installs are not available at this time"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsxs)(n.strong,{children:["NOTE: If the ",(0,o.jsx)(n.code,{children:"phylum"})," CLI binary is installed locally, it will be used. Otherwise, the hook will install it."]})}),"\n",(0,o.jsxs)(n.h2,{id:"configure-pre-commit-configyaml",children:["Configure ",(0,o.jsx)(n.code,{children:".pre-commit-config.yaml"})]}),"\n",(0,o.jsxs)(n.p,{children:["Phylum analysis of dependencies can be added to existing ",(0,o.jsx)(n.code,{children:"pre-commit"})," configurations or\non it's own with this minimal configuration:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"# This is the config for using `pre-commit` on this repository.\n#\n# See https://pre-commit.com for more information\n---\nrepos:\n  - repo: https://github.com/phylum-dev/phylum-ci\n    rev: main\n    hooks:\n      - id: phylum\n        # Optional: Specify the dependency file pattern for your repository\n        files: ''\n        # Optional: Specify additional arguments to be passed to `phylum-ci`\n        args: []\n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"NOTE"}),": This example configuration uses a mutable reference for ",(0,o.jsx)(n.code,{children:"rev"}),", which is a bad practice\n(and only done here to prevent old tags from being used through copy and paste implementations).\nA best practice is to ensure the ",(0,o.jsx)(n.code,{children:"rev"})," key for all hooks is updated to a valid and current immutable reference:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sh",children:"pre-commit autoupdate --freeze\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The hook can be customized with ",(0,o.jsx)(n.a,{href:"https://pre-commit.com/index.html#pre-commit-configyaml---hooks",children:"optional keys"})," in the config file.\nTwo common customization keys for the ",(0,o.jsx)(n.code,{children:"phylum"})," hook are ",(0,o.jsx)(n.code,{children:"files"})," and ",(0,o.jsx)(n.code,{children:"args"}),":"]}),"\n",(0,o.jsx)(n.h3,{id:"file-control",children:"File Control"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"files"})," key in the hook configuration file is the way to ensure the hook only runs when specified\ndependency files have changed, saving execution time."]}),"\n",(0,o.jsxs)(n.p,{children:["The value for the ",(0,o.jsx)(n.code,{children:"files"})," key is a ",(0,o.jsx)(n.a,{href:"https://docs.python.org/3/library/re.html#regular-expression-syntax",children:"Python regular expression"})," and is matched with ",(0,o.jsx)(n.code,{children:"re.search"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"        # NOTE: These are examples. Only one `files` key for the hook is expected\n\n        # Specify `package-lock.json`\n        files: ^package-lock\\.json$\n\n        # Specify `poetry.lock`\n        files: ^poetry\\.lock$\n\n        # Specify `requirements-*.txt` files\n        files: ^requirements-.*\\.txt$\n\n        # Specify both `package-lock.json` and `poetry.lock` on one line\n        files: ^(package-lock\\.json|poetry\\.lock)$\n\n        # Specify multiple files using the inline `re.VERBOSE` flag `(?x)`\n        files: |\n            (?x)^(\n                package-lock\\.json|\n                poetry\\.lock|\n                requirements-.*\\.txt|\n                Cargo\\.toml|\n                path/to/dependency\\.file\n            )$\n"})}),"\n",(0,o.jsx)(n.h3,{id:"argument-control",children:"Argument Control"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"args"})," key is the way to exert control over the execution of the Phylum analysis.\nThe ",(0,o.jsx)(n.code,{children:"phylum-ci"})," script entry point is called by the hook. It has a number of arguments that are all optional\nand defaulted to secure values. To view the arguments, their description, and default values, run the script\nwith ",(0,o.jsx)(n.code,{children:"--help"})," output as specified in the ",(0,o.jsx)(n.a,{href:"https://github.com/phylum-dev/phylum-ci/blob/main/README.md#usage",children:"Usage section of the top-level README.md"})," or view the\n",(0,o.jsx)(n.a,{href:"https://github.com/phylum-dev/phylum-ci/blob/main/docs/script_options.md",children:"script options output"})," for the latest release."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"        # NOTE: These are examples. Only one `args` key for the hook is expected\n\n        # Use the defaults for all the arguments.\n        # The default behavior is to only analyze newly added dependencies\n        # against the active policy set at the Phylum project level.\n        # The key can be removed if the defaults are used.\n        args: []\n\n        # Consider all dependencies in analysis results instead of just the newly added ones.\n        # The default is to only analyze newly added dependencies, which can be useful for\n        # existing code bases that may not meet established policy rules yet,\n        # but don't want to make things worse. Specifying `--all-deps` can be useful for\n        # casting the widest net for strict adherence to Quality Assurance (QA) standards.\n        args: [--all-deps]\n\n        # Provide debug level output.\n        args: [-vv]\n\n        # Some lockfile types (e.g., Python/pip `requirements.txt`) are ambiguous in that\n        # they can be named differently and may be a manifest or a lockfile. In cases where\n        # only specific dependency files are meant to be analyzed, it is best to specify an\n        # explicit path, either with the `--depfile` option or in a `.phylum_project` file.\n        # For more, see: https://docs.phylum.io/knowledge_base/phylum_project_files\n        args: [--depfile=requirements-prod.txt]\n\n        # Specify multiple explicit dependency file paths.\n        args:\n          - --depfile=requirements-prod.txt\n          - --depfile=package-lock.json\n          - --depfile=poetry.lock\n          - --depfile=Cargo.toml\n          - --depfile=path/to/dependency.file\n\n        # Exclude dependency files by gitignore-style pattern.\n        args: [--exclude=requirements-*.txt]\n\n        # Specify multiple exclusion patterns.\n        args:\n          - --exclude=/requirements-*.txt\n          - --exclude=build.gradle\n          - --exclude=fixtures/\n\n        # Force analysis for all dependencies in a manifest file. This is especially useful\n        # for *workspace* manifest files where there is no companion lockfile (e.g., libraries).\n        args: [--force-analysis, --all-deps, --depfile=Cargo.toml]\n\n        # Perform analysis as part of an organization and/or group-owned project.\n        # When an org is specified, a group name must also be specified.\n        args: [--org=my_org, --group=my_group]\n        args: [--group=my_group]\n\n        # Ensure the latest Phylum CLI is installed.\n        args: [--force-install]\n\n        # Install a specific version of the Phylum CLI.\n        args: [--phylum-release=4.8.0, --force-install]\n\n        # Mix and match for your specific use case.\n        args:\n          - -vv\n          - --org=my_org\n          - --group=my_group\n          - --depfile=requirements-prod.txt\n          - --depfile=path/to/dependency.file\n          - --depfile=Cargo.toml\n          - --force-analysis\n          - --all-deps\n"})}),"\n",(0,o.jsx)(n.h3,{id:"exit-codes",children:"Exit Codes"}),"\n",(0,o.jsxs)(n.p,{children:["The Phylum analysis hook will return a zero (0) exit code when it completes successfully and a non-zero code otherwise.\nThe full and current list of exit codes is ",(0,o.jsx)(n.a,{href:"https://github.com/phylum-dev/phylum-ci#exit-codes",children:"documented here"}),' and "Output Modification"\n',(0,o.jsx)(n.a,{href:"https://github.com/phylum-dev/phylum-ci/blob/main/docs/script_options.md",children:"options exist"})," to be strict or loose with setting them."]}),"\n",(0,o.jsx)(n.h3,{id:"audit-mode",children:"Audit Mode"}),"\n",(0,o.jsxs)(n.p,{children:["It is possible to use the Phylum hook in an audit mode, where analysis is performed but results do not affect the exit\ncode. To do so, update the ",(0,o.jsx)(n.code,{children:"args"})," to include the ",(0,o.jsx)(n.code,{children:"--audit"})," flag and add the ",(0,o.jsx)(n.code,{children:"verbose: true"})," mapping to the hook\nconfiguration. That will ensure the output of the hook is printed every time so it can be examined during the audit\nperiod."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"repos:\n  - repo: https://github.com/phylum-dev/phylum-ci\n    rev: main\n    hooks:\n      - id: phylum\n        # Additional args are possible, but `--audit` is the new one.\n        args: [--audit]\n        # Since the hook will pass in audit mode, forcing the output of the hook\n        # to be printed will ensure failures have a chance of being noticed.\n        verbose: true\n"})})]})}function h(e={}){let{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},65:function(e,n,i){i.d(n,{Z:()=>l,a:()=>r});var t=i(7294);let o={},s=t.createContext(o);function r(e){let n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);