"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([["7131"],{5977:function(e,n,t){t.r(n),t.d(n,{default:()=>u,frontMatter:()=>a,metadata:()=>i,assets:()=>r,toc:()=>c,contentTitle:()=>l});var i=JSON.parse('{"id":"cli/extensions/extension_quickstart","title":"Extension Quickstart","description":"Creating an extension","source":"@site/../docs/cli/extensions/extension_quickstart.md","sourceDirName":"cli/extensions","slug":"/cli/extensions/extension_quickstart","permalink":"/cli/extensions/extension_quickstart","draft":false,"unlisted":false,"editUrl":"https://github.com/phylum-dev/cli/edit/main/docs/extensions/extension_quickstart.md","tags":[],"version":"current","lastUpdatedBy":"Charles Coggins","lastUpdatedAt":1703279877000,"frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Phylum CLI Extensions","permalink":"/cli/extensions/extension_overview"},"next":{"title":"Extension Manifest Format","permalink":"/cli/extensions/extension_manifest"}}'),s=t("5893"),o=t("65");let a={},l="Extension Quickstart",r={},c=[{value:"Creating an extension",id:"creating-an-extension",level:2},{value:"Extension structure",id:"extension-structure",level:2},{value:"Installation",id:"installation",level:2},{value:"Execution",id:"execution",level:2}];function d(e){let n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"extension-quickstart",children:"Extension Quickstart"})}),"\n",(0,s.jsx)(n.h2,{id:"creating-an-extension",children:"Creating an extension"}),"\n",(0,s.jsxs)(n.p,{children:["The best way to get started with writing your own Phylum CLI extension, is to\ngenerate an extension skeleton using the ",(0,s.jsx)(n.code,{children:"phylum extension new"})," subcommand.\nWe'll use ",(0,s.jsx)(n.code,{children:"my-extension"})," as an example in this guide:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"phylum extension new my-extension\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Once finished, we should find a new directory called ",(0,s.jsx)(n.code,{children:"my-extension"})," in our\ncurrent working directory, containing the files ",(0,s.jsx)(n.code,{children:"main.ts"})," and ",(0,s.jsx)(n.code,{children:"PhylumExt.toml"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"extension-structure",children:"Extension structure"}),"\n",(0,s.jsxs)(n.p,{children:["Extensions always contain at least two files, the manifest describing the\nextension (",(0,s.jsx)(n.code,{children:"PhylumExt.toml"}),"), and the entrypoint where the extension's execution\nwill begin. Any additional source files can be included in the extension\ndirectory and imported from the entrypoint."]}),"\n",(0,s.jsxs)(n.p,{children:["The manifest file contains metadata about the extension beyond its executable\nsource code. All available options can be found in ",(0,s.jsx)(n.a,{href:"/cli/extensions/extension_manifest",children:"the manifest format"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,s.jsx)(n.p,{children:"Since the generated extension skeleton is a fully functional extension, we can\ngo ahead and install it right away:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"phylum extension install ./my-extension\n"})}),"\n",(0,s.jsx)(n.h2,{id:"execution",children:"Execution"}),"\n",(0,s.jsx)(n.p,{children:"Once successfully installed, our extension can be executed by using its name as\na subcommand for the phylum CLI:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shellsession",children:"$ phylum my-extension\nHello, World!\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"Hello, World!"})," message confirms that our extension is working correctly."]})]})}function u(e={}){let{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},65:function(e,n,t){t.d(n,{Z:function(){return l},a:function(){return a}});var i=t(7294);let s={},o=i.createContext(s);function a(e){let n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);