"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([["9172"],{3661:function(e,i,t){t.r(i),t.d(i,{frontMatter:()=>o,toc:()=>l,default:()=>h,metadata:()=>n,assets:()=>c,contentTitle:()=>r});var n=JSON.parse('{"id":"analytics/invokes_native_code","title":"Invokes Native Code","description":"Description","source":"@site/../docs/analytics/invokes_native_code.md","sourceDirName":"analytics","slug":"/analytics/invokes_native_code","permalink":"/analytics/invokes_native_code","draft":false,"unlisted":false,"editUrl":"https://github.com/phylum-dev/documentation/edit/main/docs/analytics/invokes_native_code.md","tags":[],"version":"current","lastUpdatedBy":"Charles Coggins","lastUpdatedAt":1703286129000,"frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Hostname Identification","permalink":"/analytics/hostname_identification"},"next":{"title":"IP Address Identification","permalink":"/analytics/ip_identification"}}'),a=t(4848),s=t(4429);let o={},r="Invokes Native Code",c={},l=[{value:"Description",id:"description",level:2},{value:"Importance",id:"importance",level:2},{value:"Examples",id:"examples",level:2}];function d(e){let i={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(i.header,{children:(0,a.jsx)(i.h1,{id:"invokes-native-code",children:"Invokes Native Code"})}),"\n",(0,a.jsx)(i.h2,{id:"description",children:"Description"}),"\n",(0,a.jsxs)(i.p,{children:[(0,a.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Dynamic_linker",children:"Dynamic linking"})," is when the operating system loads external shared libraries and binds them to a running process. Operating systems contain many shared libraries, that is, native code, which are dynamically linked, because it allows for multiple running processes to share a single instance of a library in memory. Thus, dynamic linking, that is, invoking native code, is a way to optimize memory usage."]}),"\n",(0,a.jsx)(i.h2,{id:"importance",children:"Importance"}),"\n",(0,a.jsxs)(i.p,{children:["Function calls that load native code ",(0,a.jsx)(i.em,{children:"may"}),' have legitimate use cases. However, packages that load native code can be used in attempts to load malicious binaries or to "live off the land".']}),"\n",(0,a.jsxs)(i.p,{children:['Christopher Campbell and Matthew Graeber coined the phrase "living off the land" in their ',(0,a.jsx)(i.a,{href:"https://www.youtube.com/watch?v=j-r6UonEkUw",children:"2013 talk"}),' at DerbyCon 3. A binary file that is native to the operating system is suitable for "Living Off the Land" (a.k.a. ',(0,a.jsx)(i.a,{href:"https://github.com/LOLBAS-Project/LOLBAS#criteria",children:"LOLBin"}),") if it is a file capable of undocumented functionality that could be used by malicious attacker, ",(0,a.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Advanced_persistent_threat",children:"APT"}),", or ",(0,a.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Red_team",children:"red team"}),". A full list of LOLBin binaries, libraries, and scripts can be found at the ",(0,a.jsx)(i.a,{href:"https://lolbas-project.github.io/",children:"LOLBAS project"}),"."]}),"\n",(0,a.jsx)(i.p,{children:"Open source packages containing calls to native code should be scrutinized. If the call does not fit the intended functionality of the package, the package should be avoided."}),"\n",(0,a.jsx)(i.h2,{id:"examples",children:"Examples"}),"\n",(0,a.jsxs)(i.p,{children:["In Java, functions such as ",(0,a.jsx)(i.code,{children:"load"}),", ",(0,a.jsx)(i.code,{children:"loadLibrary"}),", and ",(0,a.jsx)(i.code,{children:"loadLibraryFromJar"})," dynamically link a library to a process."]})]})}function h(e={}){let{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,a.jsx)(i,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},4429:function(e,i,t){t.d(i,{R:()=>o,x:()=>r});var n=t(6540);let a={},s=n.createContext(a);function o(e){let i=n.useContext(s);return n.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function r(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),n.createElement(s.Provider,{value:i},e.children)}}}]);