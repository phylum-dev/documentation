"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([["7405"],{4316:function(e,n,i){i.r(n),i.d(n,{frontMatter:()=>o,default:()=>h,toc:()=>d,metadata:()=>s,assets:()=>l,contentTitle:()=>a});var s=JSON.parse('{"id":"cli/extensions/extension_manifest","title":"Extension Manifest Format","description":"Overview","source":"@site/../docs/cli/extensions/extension_manifest.md","sourceDirName":"cli/extensions","slug":"/cli/extensions/extension_manifest","permalink":"/cli/extensions/extension_manifest","draft":false,"unlisted":false,"editUrl":"https://github.com/phylum-dev/cli/edit/main/docs/extensions/extension_manifest.md","tags":[],"version":"current","lastUpdatedBy":"Charles Coggins","lastUpdatedAt":1742485300000,"frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Extension Quickstart","permalink":"/cli/extensions/extension_quickstart"},"next":{"title":"Extension API","permalink":"/cli/extensions/extension_api"}}'),r=i(5893),t=i(65);let o={},a="Extension Manifest Format",l={},d=[{value:"Overview",id:"overview",level:2},{value:"Name",id:"name",level:2},{value:"Description",id:"description",level:2},{value:"Entry Point",id:"entry-point",level:2},{value:"Permissions",id:"permissions",level:2},{value:"Read",id:"read",level:3},{value:"Write",id:"write",level:3},{value:"Env",id:"env",level:3},{value:"Run",id:"run",level:3},{value:"Unsandboxed Run",id:"unsandboxed-run",level:3},{value:"Net",id:"net",level:3}];function c(e){let n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"extension-manifest-format",children:"Extension Manifest Format"})}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsxs)(n.p,{children:["Extension metadata is defined in the ",(0,r.jsx)(n.code,{children:"PhylumExt.toml"})," file, using the ",(0,r.jsx)(n.a,{href:"https://toml.io",children:"TOML"}),"\nformat. Manifest files consist of the following sections:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#name",children:(0,r.jsx)(n.code,{children:"name"})})," \u2014 Extension name"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#description",children:(0,r.jsx)(n.code,{children:"description"})})," - Description of the extension"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#entry-point",children:(0,r.jsx)(n.code,{children:"entry_point"})})," \u2014 Execution entry point"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#permissions",children:(0,r.jsx)(n.code,{children:"[permissions]"})})," \u2014 Permissions required for execution\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#read",children:(0,r.jsx)(n.code,{children:"read"})})," \u2014 Required read path permissions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#write",children:(0,r.jsx)(n.code,{children:"write"})})," \u2014 Required write path permissions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#env",children:(0,r.jsx)(n.code,{children:"env"})})," \u2014 Required environment variable permissions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#run",children:(0,r.jsx)(n.code,{children:"run"})})," \u2014 Required process execution permissions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#unsandboxed-run",children:(0,r.jsx)(n.code,{children:"unsandboxed_run"})})," - Required executables to run outside\nthe sandbox"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#net",children:(0,r.jsx)(n.code,{children:"net"})})," \u2014 Required network domain permissions"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"name",children:"Name"}),"\n",(0,r.jsx)(n.p,{children:"The extension name is used as the subcommand for executing the extension and\nacts as an identifier when referring to it."}),"\n",(0,r.jsxs)(n.p,{children:["The name is required and must use only lowercase alphanumeric characters,\nhyphens (",(0,r.jsx)(n.code,{children:"-"}),"), or underscores (",(0,r.jsx)(n.code,{children:"_"}),")."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",children:'name = "hello-world_1"\n'})}),"\n",(0,r.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,r.jsx)(n.p,{children:"The description is an optional short blurb about the extension. This should be\nplain text (not Markdown)."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",children:'description = "Example extension that greets the world"\n'})}),"\n",(0,r.jsx)(n.h2,{id:"entry-point",children:"Entry Point"}),"\n",(0,r.jsxs)(n.p,{children:["The entry point points to the file which should be loaded as the initial\nJavaScript module. Generally this will be the ",(0,r.jsx)(n.code,{children:"main.ts"})," file in the extension\nroot directory."]}),"\n",(0,r.jsx)(n.p,{children:"Phylum CLI extensions support both JavaScript and TypeScript out of the box,\ntranspiling TypeScript automatically before execution."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",children:'entry_point = "main.ts"\n'})}),"\n",(0,r.jsx)(n.h2,{id:"permissions",children:"Permissions"}),"\n",(0,r.jsx)(n.p,{children:"Since extensions are executed inside Deno's JavaScript sandbox, no external\neffects can be performed without requesting the necessary permissions."}),"\n",(0,r.jsx)(n.p,{children:"Users will be prompted to agree to these permissions during install, they are\nlater validated during execution relative to the active working directory when\nrunning it."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"[permissions]"})," is an optional table of key-value pairs where each key is a type\nof permission."]}),"\n",(0,r.jsx)(n.h3,{id:"read",children:"Read"}),"\n",(0,r.jsx)(n.p,{children:"Read permissions list file paths which can be read from by the extension."}),"\n",(0,r.jsx)(n.p,{children:"Granting permissions to a directory will also allow the extension to access any\nchild directories and files inside them."}),"\n",(0,r.jsx)(n.p,{children:"This is an optional key-value pair where the value is either a boolean, or an\narray containing the allowed directories."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",children:'[permissions]\n# ...\nread = [\n    "./path/to/file.txt",\n    "./path/to/directory",\n    "./config_file.yaml",\n]\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",children:"[permissions]\n# ...\nread = true\n"})}),"\n",(0,r.jsx)(n.h3,{id:"write",children:"Write"}),"\n",(0,r.jsx)(n.p,{children:"Write permissions list file paths which can be written to by the extension."}),"\n",(0,r.jsx)(n.p,{children:"Granting permissions to a directory will also allow the extension to access any\nchild directories and files inside them."}),"\n",(0,r.jsx)(n.p,{children:"This is an optional key-value pair where the value is either a boolean, or an\narray containing the allowed directories."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",children:'[permissions]\n# ...\nwrite = ["./output_file.txt"]\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",children:"[permissions]\n# ...\nwrite = true\n"})}),"\n",(0,r.jsx)(n.h3,{id:"env",children:"Env"}),"\n",(0,r.jsx)(n.p,{children:"Env permissions list environment variables which can be read by the extension."}),"\n",(0,r.jsx)(n.p,{children:"This is an optional key-value pair where the value is either a boolean, or an\narray containing the allowed environment variables."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",children:'[permissions]\n# ...\nenv = ["PHYLUM_API_KEY"]\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",children:"[permissions]\n# ...\nenv = true\n"})}),"\n",(0,r.jsx)(n.h3,{id:"run",children:"Run"}),"\n",(0,r.jsx)(n.p,{children:"Run permissions list executable paths which can be executed by the extension."}),"\n",(0,r.jsxs)(n.p,{children:["This permission is required for executing paths with ",(0,r.jsx)(n.code,{children:"Phylum.runSandboxed"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["The executable paths take ",(0,r.jsx)(n.code,{children:"$PATH"})," into account, so it is recommended to avoid\nusing absolute paths to improve portability."]}),"\n",(0,r.jsxs)(n.p,{children:["The paths also need to match ",(0,r.jsx)(n.strong,{children:"exactly"})," with the process executed by the\nextension. ",(0,r.jsx)(n.code,{children:"/usr/bin/curl"})," cannot be executed when ",(0,r.jsx)(n.code,{children:"curl"})," was requested as\npermission and vice versa."]}),"\n",(0,r.jsx)(n.p,{children:"This is an optional key-value pair where the value is either a boolean, or an\narray containing the allowed executables."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"IMPORTANT NOTE:"})," Granting run permission implicitly grants read permissions\non the same paths because both permissions are necessary to run an executable.\nThis means that using ",(0,r.jsx)(n.code,{children:"run = true"})," implies ",(0,r.jsx)(n.code,{children:"read = true"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",children:'[permissions]\n# ...\nrun = ["npm", "yarn"]\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",children:"[permissions]\n# ...\nrun = true\n"})}),"\n",(0,r.jsx)(n.h3,{id:"unsandboxed-run",children:"Unsandboxed Run"}),"\n",(0,r.jsxs)(n.p,{children:["Unsandboxed run permissions list executable paths which can be executed without\n",(0,r.jsx)(n.strong,{children:"any"})," sandboxing restrictions. This means they can execute arbitrary code even\nbeyond the requested manifest permissions."]}),"\n",(0,r.jsxs)(n.p,{children:["This permission is required for executing paths with ",(0,r.jsx)(n.code,{children:"Deno.Command"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["See ",(0,r.jsx)(n.a,{href:"#run",children:"run"})," for more details."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",children:'[permissions]\n# ...\nunsandboxed_run = ["npm", "yarn"]\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",children:"[permissions]\n# ...\nunsandboxed_run = true\n"})}),"\n",(0,r.jsx)(n.h3,{id:"net",children:"Net"}),"\n",(0,r.jsx)(n.p,{children:"Net permissions list domains which can be accessed by the extension."}),"\n",(0,r.jsx)(n.p,{children:"Network permissions only describe the domains and subdomains an extension has\naccess to, regardless of its path segments or protocol scheme. Access to a\ndomain does not automatically grant access to all of its subdomains."}),"\n",(0,r.jsx)(n.p,{children:"If the requested domain requests a redirect, you'll also require permissions to\naccess the redirect target. It's easiest to just specify the redirect target\ndirectly when making requests, otherwise you'll have to request permissions for\nboth domains."}),"\n",(0,r.jsx)(n.p,{children:"This is an optional key-value pair where the value is either a boolean, or an\narray containing the allowed domains."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",children:'[permissions]\n# ...\nnet = ["www.veracode.com", "veracode.com"]\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",children:"[permissions]\n# ...\nnet = true\n"})})]})}function h(e={}){let{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},65:function(e,n,i){i.d(n,{Z:()=>a,a:()=>o});var s=i(7294);let r={},t=s.createContext(r);function o(e){let n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);