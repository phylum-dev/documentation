"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[6728],{3032:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>a,toc:()=>d});var s=i(4848),t=i(8453);const l={},o="Policy Development",a={id:"knowledge_base/policy_development",title:"Policy Development",description:"Policy Basics",source:"@site/../docs/knowledge_base/policy_development.md",sourceDirName:"knowledge_base",slug:"/knowledge_base/policy_development",permalink:"/knowledge_base/policy_development",draft:!1,unlisted:!1,editUrl:"https://github.com/phylum-dev/documentation/edit/main/docs/knowledge_base/policy_development.md",tags:[],version:"current",lastUpdatedBy:"Brad Crawford",lastUpdatedAt:1723073253e3,frontMatter:{},sidebar:"docsSidebar",previous:{title:"Policy Management",permalink:"/knowledge_base/policy_management"},next:{title:"Threat Feed",permalink:"/knowledge_base/threat_feed"}},c={},d=[{value:"Policy Basics",id:"policy-basics",level:2},{value:"Creating a local policy development environment",id:"creating-a-local-policy-development-environment",level:2},{value:"Download the OPA CLI",id:"download-the-opa-cli",level:3},{value:"Download the policy SDK",id:"download-the-policy-sdk",level:3},{value:"Download input data",id:"download-input-data",level:3},{value:"Evaluating policies locally",id:"evaluating-policies-locally",level:2},{value:"Automated testing",id:"automated-testing",level:2},{value:"Evaluating policies using the Phylum API",id:"evaluating-policies-using-the-phylum-api",level:2},{value:"Policy Examples",id:"policy-examples",level:2},{value:"Blocking an issue",id:"blocking-an-issue",level:3},{value:"Blocking a dependency",id:"blocking-a-dependency",level:3}];function r(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"policy-development",children:"Policy Development"})}),"\n",(0,s.jsx)(n.h2,{id:"policy-basics",children:"Policy Basics"}),"\n",(0,s.jsxs)(n.p,{children:["This is a basic policy using an ",(0,s.jsx)(n.code,{children:"issue"})," rule to block any HIGH/CRITICAL issues."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rego",children:"# METADATA\n# title: Limit risk\n# description: |\n#   Block issues based on risk level.\npackage policy.v1\n\nimport data.phylum.level\nimport rego.v1\n\n# METADATA\n# title: risk level cannot exceed medium\ndeny contains issue if {\n    some issue in data.issues\n    issue.severity > level.MEDIUM\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"title"})," and ",(0,s.jsx)(n.code,{children:"description"})," from the initial metadata comments are displayed in the Phylum UI and are highly recommended."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"package policy.v1"})," line must be present. This is how ",(0,s.jsx)(n.a,{href:"https://www.openpolicyagent.org/",children:"Open Policy Agent"})," (OPA) finds the policy's rules."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"deny"})," rule will contain the specified issue when the ",(0,s.jsx)(n.code,{children:"if"})," statement is ",(0,s.jsx)(n.code,{children:"true"}),". OPA iterates through the job input data evaluating the expression against the severity level of every issue in the job."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"title"})," field from the metadata comment above the rule will be associated with the failure in the output from Phylum."]}),"\n",(0,s.jsx)(n.h2,{id:"creating-a-local-policy-development-environment",children:"Creating a local policy development environment"}),"\n",(0,s.jsx)(n.p,{children:"It is recommended to set up a local development environment for a better policy development experience. With a local development environment, you gain benefits such as faster feedback, more diagnostic abilities, version control, and automated testing."}),"\n",(0,s.jsx)(n.h3,{id:"download-the-opa-cli",children:"Download the OPA CLI"}),"\n",(0,s.jsxs)(n.p,{children:["Follow the instructions at ",(0,s.jsx)(n.a,{href:"https://www.openpolicyagent.org/docs/latest/#1-download-opa",children:"www.openpolicyagent.org"})," to\ndownload a copy of the OPA command line tool and run ",(0,s.jsx)(n.code,{children:"opa version"})," to ensure it is working."]}),"\n",(0,s.jsx)(n.h3,{id:"download-the-policy-sdk",children:"Download the policy SDK"}),"\n",(0,s.jsxs)(n.p,{children:["Download the policy SDK from ",(0,s.jsx)(n.a,{href:"https://api.phylum.io/api/v0/data/jobs/policy/sdk.zip",children:"the Phylum API endpoint"})," and\nextract it."]}),"\n",(0,s.jsx)(n.h3,{id:"download-input-data",children:"Download input data"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:'job="YOUR JOB ID"\ntoken=$(phylum auth token -b)\ncurl -H "Authorization: Bearer ${token}" "https://api.phylum.io/api/v0/data/jobs/${job}/policy/input" -fo input.json\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Note: You can obtain a Job ID by using the ",(0,s.jsx)(n.a,{href:"/cli/commands/phylum_history",children:(0,s.jsx)(n.code,{children:"phylum history"})})," command from the Phylum CLI."]}),"\n",(0,s.jsx)(n.h2,{id:"evaluating-policies-locally",children:"Evaluating policies locally"}),"\n",(0,s.jsxs)(n.p,{children:["A policy can be evaluated using ",(0,s.jsx)(n.code,{children:"opa eval --data <YOUR POLICY>.rego --data constants.json --input input.json --schema schema --format pretty data.policy.v1"}),"."]}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Input"}),(0,s.jsx)(n.th,{children:"Description"}),(0,s.jsx)(n.th,{children:"Provider"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"<YOUR POLICY>.rego"})}),(0,s.jsx)(n.td,{children:"policy you want to test"}),(0,s.jsx)(n.td,{children:"User"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"constants.json"})}),(0,s.jsx)(n.td,{children:"constants that can be used in your custom policy"}),(0,s.jsx)(n.td,{children:"Phylum"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"input.json"})}),(0,s.jsx)(n.td,{children:"input data to evaluate, generally from a Phylum job response"}),(0,s.jsx)(n.td,{children:"User"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"schema"})}),(0,s.jsx)(n.td,{children:"location of the schema files"}),(0,s.jsx)(n.td,{children:"Phylum"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"data.phylum.job"})}),(0,s.jsx)(n.td,{children:"entry point"}),(0,s.jsx)(n.td,{children:"Static value"})]})]})]}),"\n",(0,s.jsxs)(n.p,{children:["If everything is working, you will receive JSON output from ",(0,s.jsx)(n.code,{children:"opa"})," that looks like this:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n    "deny": []\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"This is what the output looks like when the job is allowed by the policy. When the policy blocks something, there will be additional data describing the failure."}),"\n",(0,s.jsx)(n.h2,{id:"automated-testing",children:"Automated testing"}),"\n",(0,s.jsxs)(n.p,{children:["Open Policy Agent has documentation on ",(0,s.jsx)(n.a,{href:"https://www.openpolicyagent.org/docs/latest/policy-testing/",children:"policy testing"}),". Writing an automated test for your Phylum policy looks something like this:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rego",children:'# example_test.rego\n# This is a test for the default.rego which blocks high/critical severity issues.\n\npackage policy.v1\n\nimport data.phylum.level\nimport rego.v1\n\ntest_block_high if {\n    issue := {\n        "id": "abc",\n        "tag": "tag",\n        "severity": level.HIGH\n    }\n\n    # Evaluate policy with mock input\n    check := deny with data.issues as [issue]\n\n    # Assert that the set contains the expected issue\n    check == {issue}\n}\n\ntest_allow_medium if {\n    issue := {\n        "id": "abc",\n        "tag": "tag",\n        "severity": level.MEDIUM\n    }\n\n    # Evaluate policy with mock input\n    check := deny with data.issues as [issue]\n\n    # Assert that the set is empty\n    check == set()\n}\n\n'})}),"\n",(0,s.jsxs)(n.p,{children:["This test requires ",(0,s.jsx)(n.code,{children:"constants.json"})," from the Phylum SDK. The test can be executed against the Phylum ",(0,s.jsx)(n.code,{children:"default.rego"})," policy using ",(0,s.jsx)(n.code,{children:"opa test constants.json default.rego example_test.rego"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"evaluating-policies-using-the-phylum-api",children:"Evaluating policies using the Phylum API"}),"\n",(0,s.jsxs)(n.p,{children:["Using the ",(0,s.jsx)(n.a,{href:"https://api.phylum.io/api/v0/swagger/index.html#/Jobs/evaluate_policy",children:(0,s.jsx)(n.code,{children:"evaluate_policy"})})," API, it's possible to evaluate policies within Phylum. This is the same API used by Phylum tooling."]}),"\n",(0,s.jsxs)(n.p,{children:["To evaluate an existing job using ",(0,s.jsx)(n.code,{children:"example.rego"})," you can make an API call like this:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:'curl -H "Authorization: Bearer $(phylum auth token -b)" -H "Content-Type: text/plain" --data-binary @example.rego https://api.phylum.io/api/v0/data/jobs/YOUR_JOB_ID/policy/evaluate\n'})}),"\n",(0,s.jsx)(n.p,{children:"If the endpoint is called with no body, the project's saved policy will be used."}),"\n",(0,s.jsx)(n.p,{children:"If policy evaluation is successful, the result will contain both the policy output as well as a generated report in Markdown format."}),"\n",(0,s.jsx)(n.p,{children:"Issues that have been suppressed via project preferences are visible to the policy, but the related rejections will not be included in the Markdown report."}),"\n",(0,s.jsxs)(n.p,{children:["Dependencies that are ignored via the ",(0,s.jsx)(n.code,{children:"ignored_packages"})," parameter are filtered out before applying the policy and will not be visible in the policy input or output."]}),"\n",(0,s.jsx)(n.h2,{id:"policy-examples",children:"Policy Examples"}),"\n",(0,s.jsx)(n.p,{children:"The policy transforms your threat model into a description of why the job is being blocked. There are multiple ways to define why a job should be blocked."}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"METADATA"})," block contains OPA ",(0,s.jsx)(n.a,{href:"https://www.openpolicyagent.org/docs/latest/annotations/",children:"Annotations"})," which correlate to the schema and can be used for type checking."]}),"\n",(0,s.jsx)(n.h3,{id:"blocking-an-issue",children:"Blocking an issue"}),"\n",(0,s.jsx)(n.p,{children:"The most common reason to block a job is because one of the dependencies has a known issue within one of Phylum's risk domains."}),"\n",(0,s.jsxs)(n.p,{children:["The following policy shows ways to block using an ",(0,s.jsx)(n.code,{children:"issue"})," rule based on a per-domain threshold."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rego",children:"package policy.v1\n\nimport data.phylum.domain\nimport data.phylum.level\nimport rego.v1\n\n# METADATA\n# title: risk level cannot exceed medium\ndeny contains issue if {\n    some issue in data.issues\n    issue.domain in {domain.AUTHOR, domain.ENGINEERING, domain.VULNERABILITY}\n    issue.severity > level.MEDIUM\n}\n\n# METADATA\n# title: malicious risk level cannot exceed low\ndeny contains issue if {\n    some issue in data.issues\n    issue.domain == domain.MALICIOUS\n    issue.severity > level.LOW\n}\n\n# METADATA\n# title: license risk level cannot exceed high\ndeny contains issue if {\n    some issue in data.issues\n    issue.domain == domain.LICENSE\n    issue.severity > level.HIGH\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Given the following input:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n    "issues": [{\n        "id": "b8ad4443-d875-427b-9eda-b4b2fb1d6212",\n        "domain": "malicious",\n        "severity": 4,\n        "tag": "CM0004"\n    }]\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"When the policy fails, the output will look something like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n    "deny": [{\n        "id": "b8ad4443-d875-427b-9eda-b4b2fb1d6212",\n        "domain": "malicious",\n        "severity": 4,\n        "tag": "CM0004"\n    }]\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"When Phylum sees this output from the policy, it will block the job and generate a report naming the package and describing the issue."}),"\n",(0,s.jsx)(n.h3,{id:"blocking-a-dependency",children:"Blocking a dependency"}),"\n",(0,s.jsxs)(n.p,{children:["You may also block on a dependency-level characteristic using a ",(0,s.jsx)(n.code,{children:"dependency"})," rule."]}),"\n",(0,s.jsxs)(n.p,{children:["The following policy blocks packages belonging to a namespace.\nNote: This is just an example, there is already a ",(0,s.jsx)(n.a,{href:"https://github.com/phylum-dev/policy/blob/main/copyleft_license.rego",children:"policy"})," for blocking copyleft licenses."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rego",children:'package policy.v1\n\nimport rego.v1\n\n# METADATA\n# title: AGPL licensed software is not allowed.\ndeny contains dependency if {\n    some dependency in data.dependencies\n    regex.match("(?i)\\\\bAGPL\\\\b", dependency.license)\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Given the following input:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n    "dependencies": [{\n        "ecosystem": "npm",\n        "id": "4cc36d79-b8ce-5b7d-89c1-6f6a31f59819",\n        "issues": [],\n        "issues_complete": true,\n        "license": "AGPL-3.0",\n        "name": "example-package",\n        "version": "1.0.0"\n    }]\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"When the policy fails, the output will look something like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "deny": [{\n        "ecosystem": "npm",\n        "id": "4cc36d79-b8ce-5b7d-89c1-6f6a31f59819",\n        "issues": [],\n        "issues_complete": true,\n        "license": "AGPL-3.0",\n        "name": "example-package",\n        "version": "1.0.0"\n    }]\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"When Phylum sees this output from the policy, it will block the job and generate a report naming the package and providing this message in the output."})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(r,{...e})}):r(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>a});var s=i(6540);const t={},l=s.createContext(t);function o(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);