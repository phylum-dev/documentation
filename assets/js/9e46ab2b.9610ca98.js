"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[4998],{2494:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>c,toc:()=>l});var i=t(4848),a=t(8453);const s={},o="Dependency Confusion",c={id:"analytics/dependency_confusion",title:"Dependency Confusion",description:"Description",source:"@site/../docs/analytics/dependency_confusion.md",sourceDirName:"analytics",slug:"/analytics/dependency_confusion",permalink:"/analytics/dependency_confusion",draft:!1,unlisted:!1,editUrl:"https://github.com/phylum-dev/documentation/edit/main/docs/analytics/dependency_confusion.md",tags:[],version:"current",lastUpdatedBy:"Charles Coggins",lastUpdatedAt:1703286129e3,frontMatter:{},sidebar:"docsSidebar",previous:{title:"Compiled Binary",permalink:"/analytics/compiled_binary"},next:{title:"Depends on Malware",permalink:"/analytics/depends_on_malware"}},r={},l=[{value:"Description",id:"description",level:2},{value:"Importance",id:"importance",level:2},{value:"Examples",id:"examples",level:2}];function d(e){const n={em:"em",h1:"h1",h2:"h2",header:"header",p:"p",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"dependency-confusion",children:"Dependency Confusion"})}),"\n",(0,i.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"Dependency confusion attacks can occur when a package in a private registry does not exist in a public ecosystem's registry. Many package managers, used in build tooling, check public registries before private registries when downloading and installing packages. If an attacker learns the name of a package in someone's private registry, they can upload an identically named but malicious package to a public registry. Developers then mistakenly include the malicious public package in their software instead of the safe private package."}),"\n",(0,i.jsx)(n.h2,{id:"importance",children:"Importance"}),"\n",(0,i.jsxs)(n.p,{children:["This attack can be particularly difficult to detect because it does ",(0,i.jsx)(n.em,{children:"not"})," rely on typos like a typosquatting attack, but instead relies on and exploits misconfigured internal build servers to install a package of the same exact name but from a different registry. Without deep knowledge of the build pipeline or knowing where your package installer is looking first, you might not even know you're getting the wrong package."]}),"\n",(0,i.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(n.p,{children:"In early 2021, a bug bounty researcher built the first proof of concept of this type of attack and was able to successfully demonstrate execution of his code inside more than 35 different organizations."})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>c});var i=t(6540);const a={},s=i.createContext(a);function o(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);