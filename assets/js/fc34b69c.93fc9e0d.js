"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([["5526"],{6420:function(e,r,t){t.r(r),t.d(r,{default:()=>d,frontMatter:()=>a,metadata:()=>n,assets:()=>c,toc:()=>l,contentTitle:()=>o});var n=JSON.parse('{"id":"artifact_repositories/cargo","title":"Phylum Cargo Registry","description":"The Phylum Cargo registry is based on Cargo\'s sparse [Registry Index API].","source":"@site/../docs/artifact_repositories/cargo.md","sourceDirName":"artifact_repositories","slug":"/artifact_repositories/cargo","permalink":"/artifact_repositories/cargo","draft":false,"unlisted":false,"editUrl":"https://github.com/phylum-dev/documentation/edit/main/docs/artifact_repositories/cargo.md","tags":[],"version":"current","lastUpdatedBy":"Christian D\xfcrr","lastUpdatedAt":1730741225000,"frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Artifactory","permalink":"/artifact_repositories/artifactory"},"next":{"title":"Phylum Maven Registry","permalink":"/artifact_repositories/maven"}}'),i=t("5893"),s=t("65");let a={},o="Phylum Cargo Registry",c={},l=[{value:"Configuration",id:"configuration",level:2},{value:"<code>cargo</code>",id:"cargo",level:3}];function h(e){let r={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"phylum-cargo-registry",children:"Phylum Cargo Registry"})}),"\n",(0,i.jsxs)(r.p,{children:["The Phylum Cargo registry is based on Cargo's sparse ",(0,i.jsx)(r.a,{href:"https://doc.rust-lang.org/cargo/reference/registry-index.html",children:"Registry Index API"}),"."]}),"\n",(0,i.jsx)(r.h2,{id:"configuration",children:"Configuration"}),"\n",(0,i.jsxs)(r.p,{children:["All configuration options will require a Phylum API key, since Phylum requires\nauthentication. You can find out how to generate one in our\n",(0,i.jsx)(r.a,{href:"/knowledge_base/api-keys#generate-an-api-key",children:"API Keys documentation"}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["In the following examples, all API keys will be represented as\n",(0,i.jsx)(r.code,{children:"<PHYLUM_API_KEY>"}),", so make sure to replace them with your generated key."]}),"\n",(0,i.jsxs)(r.p,{children:["Additionally, if the default policy is not sufficient, a group can be passed to\nevaluate all packages against the group's policy. To do this, just replace\n",(0,i.jsx)(r.code,{children:"<PHYLUM_ORG>"})," and ",(0,i.jsx)(r.code,{children:"<PHYLUM_GROUP>"})," with the desired org and group name. The\nsupplied API key ",(0,i.jsx)(r.strong,{children:"must"})," have access to this group."]}),"\n",(0,i.jsxs)(r.p,{children:["If Phylum's default ",(0,i.jsx)(r.a,{href:"/knowledge_base/policy",children:"policy"})," is sufficient, you can omit the username from the\nauthentication details."]}),"\n",(0,i.jsx)(r.h3,{id:"cargo",children:(0,i.jsx)(r.code,{children:"cargo"})}),"\n",(0,i.jsxs)(r.p,{children:["To use the Phylum Cargo registry, it first needs to be added to a\n",(0,i.jsxs)(r.a,{href:"https://doc.rust-lang.org/cargo/reference/config.html",children:[(0,i.jsx)(r.code,{children:".cargo/config.toml"})," file"]}),". On UNIX you can use ",(0,i.jsx)(r.code,{children:"~/.cargo/config.toml"})," to make\nthe registry available to all projects."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-toml",children:'[registries]\nphylum = { index = "sparse+https://cargo.phylum.io/" }\n'})}),"\n",(0,i.jsxs)(r.p,{children:["This makes the Phylum registry available to all Cargo projects, however by\ndefault Cargo will still use the official registry. To ensure all requests go\nthrough Phylum, you'll have to override the ",(0,i.jsx)(r.a,{href:"https://crates.io",children:"crates.io"})," registry in the\n",(0,i.jsxs)(r.a,{href:"https://doc.rust-lang.org/cargo/reference/config.html",children:[(0,i.jsx)(r.code,{children:".cargo/config.toml"})," file"]}),". This can be a project's Cargo config if you do not\nwish to globally run every install through Phylum."]}),"\n",(0,i.jsxs)(r.p,{children:["The easiest way to enable Phylum is by replacing the ",(0,i.jsx)(r.a,{href:"https://crates.io",children:"crates.io"})," source with\nPhylum's registry. This has the advantage of creating ",(0,i.jsx)(r.code,{children:"Cargo.toml"})," and\n",(0,i.jsx)(r.code,{children:"Cargo.lock"})," files that are identical to the ones created for the official\nregistry."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-toml",children:'[source.crates-io]\nreplace-with = "phylum"\n'})}),"\n",(0,i.jsx)(r.p,{children:"Since replacing the Cargo source prevents you from using the official registry,\nthis is unsuitable if certain packages should still be installable without going\nthrough Phylum. In this case you can just set Phylum to be the default registry\ninstead:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-toml",children:'[registry]\ndefault = "phylum"\n'})}),"\n",(0,i.jsxs)(r.p,{children:["Since Phylum's registry requires authentication, you'll also need to configure a\ncredential provider in your ",(0,i.jsxs)(r.a,{href:"https://doc.rust-lang.org/cargo/reference/config.html",children:[(0,i.jsx)(r.code,{children:".cargo/config.toml"})," file"]}),":"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-toml",children:'[registry]\nglobal-credential-providers = ["cargo:token"]\n'})}),"\n",(0,i.jsxs)(r.p,{children:["Once the file-based ",(0,i.jsx)(r.code,{children:"cargo:token"})," credential provider is configured, you can add\nyour authentication details to the ",(0,i.jsxs)(r.a,{href:"https://doc.rust-lang.org/nightly/cargo/reference/config.html#credentials",children:[(0,i.jsx)(r.code,{children:".cargo/credentials.toml"})," file"]}),"."]}),"\n",(0,i.jsx)(r.p,{children:"The Phylum org, group, and API key first need to be converted to Base64:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-text",children:'printf "<PHYLUM_ORG>/<PHYLUM_GROUP>:<PHYLUM_API_KEY>" | base64\n'})}),"\n",(0,i.jsxs)(r.blockquote,{children:["\n",(0,i.jsxs)(r.p,{children:["\u26A0\uFE0F ",(0,i.jsx)(r.strong,{children:"WARNING"})," \u26A0\uFE0F"]}),"\n",(0,i.jsx)(r.p,{children:"Do not accidentally save your token into your shell history."}),"\n"]}),"\n",(0,i.jsx)(r.p,{children:"Once converted to Base64, you can add it as a basic authentication token to your\ncredentials:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-toml",children:'[registries.phylum]\ntoken = "Basic <BASE64_OUTPUT>"\n'})}),"\n",(0,i.jsxs)(r.p,{children:["A blocked package will show up in ",(0,i.jsx)(r.code,{children:"cargo"})," output as missing:"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-text",children:"    Updating `phylum` index\nerror: no matching package named `libc` found\nlocation searched: registry `phylum`\nrequired by package `testing v0.1.0 (/tmp/testing)`\n"})}),"\n",(0,i.jsx)(r.p,{children:"Alternatively, if a specific version constraint matches the blocked version:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-text",children:'    Updating `phylum` index\nerror: failed to select a version for the requirement `libc = "=0.2.155"`\ncandidate versions found which didn\'t match: 0.2.158, 0.2.157, 0.2.156, ...\nlocation searched: `phylum` index\nrequired by package `testing v0.1.0 (/tmp/testing)`\n'})}),"\n",(0,i.jsx)(r.p,{children:"If a version range is accepted by the manifest, the package manager will\nautomatically attempt to use a version that passes Phylum's policy."})]})}function d(e={}){let{wrapper:r}={...(0,s.a)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},65:function(e,r,t){t.d(r,{Z:function(){return o},a:function(){return a}});var n=t(7294);let i={},s=n.createContext(i);function a(e){let r=n.useContext(s);return n.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),n.createElement(s.Provider,{value:r},e.children)}}}]);