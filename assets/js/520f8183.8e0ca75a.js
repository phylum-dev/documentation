"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[3698],{7913:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>l});var s=i(5893),t=i(1151);const o={},a="Extension Sandboxing",r={id:"cli/extensions/extension_sandboxing",title:"Extension Sandboxing",description:"Phylum's CLI extensions allow developers to impose additional restrictions when",source:"@site/../docs/cli/extensions/extension_sandboxing.md",sourceDirName:"cli/extensions",slug:"/cli/extensions/extension_sandboxing",permalink:"/cli/extensions/extension_sandboxing",draft:!1,unlisted:!1,editUrl:"https://github.com/phylum-dev/cli/edit/main/docs/extensions/extension_sandboxing.md",tags:[],version:"current",lastUpdatedBy:"Charles Coggins",lastUpdatedAt:1703279877,formattedLastUpdatedAt:"Dec 22, 2023",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Extension Example",permalink:"/cli/extensions/extension_example"},next:{title:"Direct Phylum API Requests",permalink:"/cli/extensions/extension_rest_api"}},d={},l=[{value:"Example",id:"example",level:2},{value:"Limitations",id:"limitations",level:2},{value:"Advanced Usage",id:"advanced-usage",level:2},{value:"Finding Required Exceptions",id:"finding-required-exceptions",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,t.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"extension-sandboxing",children:"Extension Sandboxing"}),"\n",(0,s.jsx)(n.p,{children:"Phylum's CLI extensions allow developers to impose additional restrictions when\nrunning third party applications. This can protect the system from damage when\nthese applications contain vulnerabilities or execute untrusted code."}),"\n",(0,s.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,s.jsxs)(n.p,{children:["The following code provides an example on how you could sandbox ",(0,s.jsx)(n.code,{children:"cat"})," to only\nallow access to files in the current working directory or below it:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { PhylumApi } from \"phylum\";\n\n// Ensure a file path is passed as the only argument.\nif (Deno.args.length !== 1) {\n    console.log(\"USAGE: local-cat <FILE>\");\n    Deno.exit(123);\n}\n\n// Run `cat` in our sandboxed environment.\nconst output = PhylumApi.runSandboxed({\n    cmd: 'cat',\n    args: [Deno.args[0]],\n    stdout: 'inherit',\n    stderr: 'inherit',\n    exceptions: {\n        read: ['./'],\n        write: false,\n        run: false,\n        net: false,\n    },\n});\n\n// Propagate the exit code for `cat`.\nDeno.exit(output.code);\n"})}),"\n",(0,s.jsxs)(n.p,{children:["When running this against a file in your local directory, it will print its\ncontent, otherwise, you'll see ",(0,s.jsx)(n.code,{children:"cat"})," printing the following error:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"cat: /tmp/illegal: Permission denied\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The important part in this code snippet is the ",(0,s.jsx)(n.code,{children:"exceptions"})," field. By default\naccess to most system resources is restricted, so if you want to access them\nfrom within the sandbox you'll have to add an exception."]}),"\n",(0,s.jsxs)(n.p,{children:["Available fields for exceptions are ",(0,s.jsx)(n.code,{children:"read"}),", ",(0,s.jsx)(n.code,{children:"write"}),", ",(0,s.jsx)(n.code,{children:"run"}),", and ",(0,s.jsx)(n.code,{children:"net"}),". The ",(0,s.jsx)(n.code,{children:"run"}),"\npermission is a superset of ",(0,s.jsx)(n.code,{children:"read"})," that allows for execution. While ",(0,s.jsx)(n.code,{children:"read"}),",\n",(0,s.jsx)(n.code,{children:"write"}),", and ",(0,s.jsx)(n.code,{children:"run"})," accept either a path to be allowed or a boolean, ",(0,s.jsx)(n.code,{children:"net"})," only\nallows for a boolean value."]}),"\n",(0,s.jsx)(n.h2,{id:"limitations",children:"Limitations"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"PhylumApi.runSandboxed"})," method is the only recommended means of spawning\nchild processes from an extension. The ",(0,s.jsx)(n.code,{children:"Deno.Command"})," method should be avoided\nin order to prevent extensions from escaping the sandbox, and will be disabled\nin a future version."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"PhylumApi.runSandboxed"})," method is only allowed to request permissions that\nare at least as restrictive as the ones specified in the manifest."]}),"\n",(0,s.jsx)(n.h2,{id:"advanced-usage",children:"Advanced Usage"}),"\n",(0,s.jsxs)(n.p,{children:["By default, access to some paths is granted automatically to make extension\nsandboxing easier and ensure portability between operating systems. If you want\nmore control over your sandboxing exceptions, you can pass ",(0,s.jsx)(n.code,{children:"strict: true"})," to the\n",(0,s.jsx)(n.code,{children:"exceptions"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const output = PhylumApi.runSandboxed({\n    cmd: 'cat',\n    args: [Deno.args[0]],\n    stdout: 'inherit',\n    stderr: 'inherit',\n    exceptions: {\n        // Discard all default sandboxing exceptions.\n        strict: true,\n\n        // You can see the required additional exceptions here.\n        // These paths might differ between operating systems and distributions.\n        run: ['/usr/bin/cat', '/usr/lib'],\n\n        // These are identical to our previous example.\n        read: ['./'],\n        write: false,\n        net: false,\n    },\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"finding-required-exceptions",children:"Finding Required Exceptions"}),"\n",(0,s.jsxs)(n.p,{children:["It can be somewhat difficult to find out which exceptions you need to add to\nallow your application to run without any errors. To simplify this a bit you can\nuse the ",(0,s.jsx)(n.a,{href:"https://github.com/phylum-dev/cli/tree/main/extensions/find-permissions",children:(0,s.jsx)(n.code,{children:"find-permissions"})})," extension."]}),"\n",(0,s.jsx)(n.p,{children:"This extension will run a script against each path in your filesystem\nrecursively to validate what the most granular necessary exceptions are. Once\ncompleted, it will output all necessary paths."}),"\n",(0,s.jsx)(n.p,{children:"Most invocations of this extension will probably look something like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"phylum find-permissions \\\n    --read \\\n    --write \\\n    --pre-bin ./setup.sh \\\n    --bin ./test.sh \\\n    --post-bin ./cleanup.sh\n"})}),"\n",(0,s.jsxs)(n.p,{children:["By passing both ",(0,s.jsx)(n.code,{children:"--read"})," and ",(0,s.jsx)(n.code,{children:"--write"})," we check for both permissions at the same\ntime. The ",(0,s.jsx)(n.code,{children:"test.sh"})," script should contain the executable we want to sandbox; in\nour example it would run ",(0,s.jsx)(n.code,{children:"cat"})," against some local files. The ",(0,s.jsx)(n.code,{children:"--pre-bin"})," and\n",(0,s.jsx)(n.code,{children:"--post-bin"})," are optional, but here we could setup and remove local files to run\n",(0,s.jsx)(n.code,{children:"cat"})," against for example."]}),"\n",(0,s.jsxs)(n.p,{children:["Since this crawls your entire directory tree, it might take some time. If you\ndon't need file-level granularity you can help speed it up by passing\n",(0,s.jsx)(n.code,{children:"--skip-files"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>r,a:()=>a});var s=i(7294);const t={},o=s.createContext(t);function a(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);