"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([["3220"],{4975:function(e,n,t){t.r(n),t.d(n,{default:()=>p,frontMatter:()=>o,metadata:()=>s,assets:()=>l,toc:()=>c,contentTitle:()=>a});var s=JSON.parse('{"id":"cli/extensions/extension_rest_api","title":"Direct Phylum API Requests","description":"Phylum REST API","source":"@site/../docs/cli/extensions/extension_rest_api.md","sourceDirName":"cli/extensions","slug":"/cli/extensions/extension_rest_api","permalink":"/cli/extensions/extension_rest_api","draft":false,"unlisted":false,"editUrl":"https://github.com/phylum-dev/cli/edit/main/docs/extensions/extension_rest_api.md","tags":[],"version":"current","lastUpdatedBy":"Kyle Willmon","lastUpdatedAt":1716331118000,"frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Extension Sandboxing","permalink":"/cli/extensions/extension_sandboxing"},"next":{"title":"Integrations Overview","permalink":"/integrations/integrations_overview"}}'),i=t(5893),r=t(65);let o={},a="Direct Phylum API Requests",l={},c=[{value:"Phylum REST API",id:"phylum-rest-api",level:2},{value:"Extension API requests",id:"extension-api-requests",level:2}];function h(e){let n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"direct-phylum-api-requests",children:"Direct Phylum API Requests"})}),"\n",(0,i.jsx)(n.h2,{id:"phylum-rest-api",children:"Phylum REST API"}),"\n",(0,i.jsx)(n.p,{children:"Phylum provides a versioned REST API for retrieving all available data. This\nREST API can be used directly by extensions if there is no TypeScript API\navailable."}),"\n",(0,i.jsxs)(n.p,{children:["All endpoints are documented here:\n",(0,i.jsx)(n.a,{href:"https://api.phylum.io/api/v0/swagger/index.html",children:"https://api.phylum.io/api/v0/swagger/index.html"})]}),"\n",(0,i.jsx)(n.h2,{id:"extension-api-requests",children:"Extension API requests"}),"\n",(0,i.jsxs)(n.p,{children:["To make a Request to Phylum's REST API, you can use the built-in ",(0,i.jsx)(n.code,{children:"Phylum.fetch"}),"\nfunction, which takes care of authentication and finding the correct base URI.\nThe following example retrieves projects owned by the user which do not belong\nto any group:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"// Create a fetch request to the `/data/projects/overview` endpoint.\nconst reply = await Phylum.fetch(\n    Phylum.ApiVersion.V0,\n    '/data/projects/overview',\n);\n\n// Parse the reply as JSON.\nconst projects = await reply.json();\n\n// Output all our projects.\nconsole.log(projects);\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The last parameter matches ",(0,i.jsxs)(n.a,{href:"https://deno.land/api@latest?s=fetch",children:["Deno's ",(0,i.jsx)(n.code,{children:"fetch"})," function"]})," and can be overwritten to\nsend more complicated requests. The following example creates a new Phylum\nproject through the API:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"// Create a fetch request to the `/data/projects` endpoint.\nconst reply = await Phylum.fetch(\n    Phylum.ApiVersion.V0,\n    '/data/projects',\n    {\n        method: 'POST',\n        body: JSON.stringify({\n            name: 'api_example',\n        }),\n    },\n);\n\n// Parse the reply as JSON.\nconst project = await reply.json();\n\n// Output the new project.\nconsole.log(project);\n"})})]})}function p(e={}){let{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},65:function(e,n,t){t.d(n,{Z:()=>a,a:()=>o});var s=t(7294);let i={},r=s.createContext(i);function o(e){let n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);