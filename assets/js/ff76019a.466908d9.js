"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[8262],{7060:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var s=n(5893),i=n(1151);const o={title:"Direct Phylum API Requests",category:"62c5cb137dbdad00536291a6",hidden:!1},r=void 0,a={id:"cli/extensions/extension_rest_api",title:"Direct Phylum API Requests",description:"Phylum REST API",source:"@site/../docs/cli/extensions/extension_rest_api.md",sourceDirName:"cli/extensions",slug:"/cli/extensions/extension_rest_api",permalink:"/cli/extensions/extension_rest_api",draft:!1,unlisted:!1,editUrl:"https://github.com/phylum-dev/documentation/tree/main/site/../docs/cli/extensions/extension_rest_api.md",tags:[],version:"current",lastUpdatedBy:"Charles Coggins",lastUpdatedAt:1694019364,formattedLastUpdatedAt:"Sep 6, 2023",frontMatter:{title:"Direct Phylum API Requests",category:"62c5cb137dbdad00536291a6",hidden:!1},sidebar:"cliSidebar",previous:{title:"Extension Sandboxing",permalink:"/cli/extensions/extension_sandboxing"}},c={},l=[{value:"Phylum REST API",id:"phylum-rest-api",level:2},{value:"Extension API requests",id:"extension-api-requests",level:2}];function p(e){const t={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"phylum-rest-api",children:"Phylum REST API"}),"\n",(0,s.jsx)(t.p,{children:"Phylum provides a versioned REST API for retrieving all available data. This\nREST API can be used directly by extensions if there is no TypeScript API\navailable."}),"\n",(0,s.jsxs)(t.p,{children:["All endpoints are documented here:\n",(0,s.jsx)(t.a,{href:"https://api.phylum.io/api/v0/swagger/index.html",children:"https://api.phylum.io/api/v0/swagger/index.html"})]}),"\n",(0,s.jsx)(t.h2,{id:"extension-api-requests",children:"Extension API requests"}),"\n",(0,s.jsxs)(t.p,{children:["To make a Request to Phylum's REST API, you can use the built-in\n",(0,s.jsx)(t.code,{children:"PhylumApi.fetch"})," function, which takes care of authentication and finding the\ncorrect base URI. The following example retrieves projects owned by the user\nwhich do not belong to any group:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"import { PhylumApi, ApiVersion } from \"phylum\";\n\n// Create a fetch request to the `/data/projects/overview` endpoint.\nconst reply = await PhylumApi.fetch(\n    ApiVersion.V0,\n    '/data/projects/overview',\n);\n\n// Parse the reply as JSON.\nconst projects = await reply.json();\n\n// Output all our projects.\nconsole.log(projects);\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The last parameter matches ",(0,s.jsxs)(t.a,{href:"https://deno.land/api@latest?s=fetch",children:["Deno's ",(0,s.jsx)(t.code,{children:"fetch"})," function"]})," and can be overwritten to\nsend more complicated requests. The following example creates a new Phylum\nproject through the API:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"import { PhylumApi, ApiVersion } from \"phylum\";\n\n// Create a fetch request to the `/data/projects` endpoint.\nconst reply = await PhylumApi.fetch(\n    ApiVersion.V0,\n    '/data/projects',\n    {\n        method: 'POST',\n        body: JSON.stringify({\n            name: 'api_example',\n        }),\n    },\n);\n\n// Parse the reply as JSON.\nconst project = await reply.json();\n\n// Output the new project.\nconsole.log(project);\n"})})]})}function d(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>a,a:()=>r});var s=n(7294);const i={},o=s.createContext(i);function r(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);